using Microsoft.CodeAnalysis;
using Depso.CSharp;

namespace Depso;

public partial class ServiceProviderGenerator
{
	private static string CreateRegistrationMethods(INamedTypeSymbol classSymbol, bool isStatic)
	{
		CodeBuilder builder = new();

		builder.AppendLine("// <auto-generated/>");
		builder.AppendLine();

		builder.AppendLine("#nullable enable");
		builder.AppendLine();

		using (AddNamespace(classSymbol, builder))
		using (AddClass(classSymbol, builder))
		{
			string systemType = Constants.TypeMetadataName.WithGlobalPrefix();
			string registrationType = $"{classSymbol.ToDisplayString()}.{Constants.RegistrationModifierClassName}".WithGlobalPrefix();

			AddRegistrationModifierClass(builder, registrationType);
			builder.AppendLine();

			using (MethodBuilder methodBuilder = builder.Method(registrationType, Constants.ImportModuleMethodName).Private())
			{
				if (isStatic)
				{
					methodBuilder.SetStatic();
				}

				methodBuilder.AddTypeParameter("T");
				builder.AppendLine($"return {registrationType}.Instance;");
			}

			builder.AppendLine();

			using (MethodBuilder methodBuilder = builder.Method(registrationType, Constants.ImportModuleMethodName).Private())
			{
				if (isStatic)
				{
					methodBuilder.SetStatic();
				}

				methodBuilder.AddParameter(systemType, "moduleType");
				builder.AppendLine($"return {registrationType}.Instance;");
			}

			builder.AppendLine();
			
			AddLifetime(Constants.SingletonMethodName);
			AddLifetime(Constants.ScopedMethodName);
			AddLifetime(Constants.TransientMethodName);

			void AddLifetime(string name)
			{
				using (MethodBuilder methodBuilder = builder.Method(registrationType, name).Private())
				{
					if (isStatic)
					{
						methodBuilder.SetStatic();
					}

					methodBuilder.AddParameter(systemType, "serviceType");
					builder.AppendLine($"return {registrationType}.Instance;");
				}

				builder.AppendLine();

				using (MethodBuilder methodBuilder = builder.Method(registrationType, name).Private())
				{
					if (isStatic)
					{
						methodBuilder.SetStatic();
					}

					methodBuilder.AddParameter(systemType, "serviceType");
					methodBuilder.AddParameter(systemType, "implementationType");

					builder.AppendLine($"return {registrationType}.Instance;");
				}

				builder.AppendLine();

				using (MethodBuilder methodBuilder = builder.Method($"{registrationType}", name).Private())
				{
					if (isStatic)
					{
						methodBuilder.SetStatic();
					}

					methodBuilder.AddTypeParameter("TService");
					builder.AppendLine($"return {registrationType}.Instance;");
				}

				builder.AppendLine();

				using (MethodBuilder methodBuilder = builder.Method($"{registrationType}", name).Private())
				{
					if (isStatic)
					{
						methodBuilder.SetStatic();
					}

					methodBuilder.AddTypeParameter("TService");
					methodBuilder.AddTypeParameter("TImplementation");
					methodBuilder.AddWhereClause("TImplementation : TService");
					
					builder.AppendLine($"return {registrationType}.Instance;");
				}

				builder.AppendLine();

				using (MethodBuilder methodBuilder = builder.Method($"{registrationType}", name).Private())
				{
					if (isStatic)
					{
						methodBuilder.SetStatic();
					}

					methodBuilder.AddTypeParameter("TService");
					
					methodBuilder.AddParameter(
						$"{Constants.FuncMetadataName.WithGlobalPrefix()}<{Constants.IServiceProviderMetadataName.WithGlobalPrefix()}, TService>",
						"factory");

					builder.AppendLine($"return {registrationType}.Instance;");
				}

				if (name != Constants.TransientMethodName)
				{
					builder.AppendLine();
				}
			}
		}

		return builder.ToString();
	}

	private static void AddRegistrationModifierClass(CodeBuilder builder, string registrationType)
	{
		using ClassBuilder classBuilder = builder.Class(Constants.RegistrationModifierClassName).Private();
		
		builder.Field(registrationType, "Instance").Public().Static().ReadOnly();
		builder.AppendLine();

		using (builder.Constructor(Constants.RegistrationModifierClassName).Static())
		{
			builder.AppendLine($"Instance = new {registrationType}();");
		}

		builder.AppendLine();

		using (builder.Constructor(Constants.RegistrationModifierClassName).Private())
		{
		}

		builder.AppendLine();

		using (builder.Method(registrationType, Constants.AlsoAsSelfMethodName))
		{
			builder.AppendLine("return this;");
		}

		builder.AppendLine();

		using (MethodBuilder methodBuilder = builder.Method(registrationType, Constants.AlsoAsMethodName))
		{
			methodBuilder.AddParameter(Constants.TypeMetadataName.WithGlobalPrefix(), "type");
			builder.AppendLine("return this;");
		}

		builder.AppendLine();

		using (MethodBuilder methodBuilder = builder.Method(registrationType, Constants.AlsoAsMethodName))
		{
			methodBuilder.AddTypeParameter("T");
			builder.AppendLine("return this;");
		}
	}
}