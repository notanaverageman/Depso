// <auto-generated/>

#nullable enable

public partial class Provider
{
    public class Scope
        :
        global::System.IDisposable,
        global::System.IAsyncDisposable,
        global::System.IServiceProvider,
        global::Microsoft.Extensions.DependencyInjection.IServiceScope
    {
        private readonly object _sync = new object();
        private readonly global::Provider _root;

        private bool _isDisposed;
        private global::System.Collections.Generic.List<global::System.IDisposable>? _transientDisposables;
        private global::System.Collections.Generic.List<global::System.IAsyncDisposable>? _transientAsyncDisposables;

        global::System.IServiceProvider global::Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider => this;

        public Scope(global::Provider root, object? sync)
        {
            _root = root;

            if (sync != null)
            {
                _sync = sync;
            }
        }

        public object? GetService(global::System.Type serviceType)
        {
            if (serviceType == typeof(global::Interface1)) return CreateService1_0AddDisposable();
            if (serviceType == typeof(global::Service1)) return CreateService1_0AddDisposable();
            if (serviceType == typeof(global::InterfaceA)) return CreateService1_0AddDisposable();
            if (serviceType == typeof(global::Service2)) return CreateService2_0AddDisposable();
            if (serviceType == typeof(global::InterfaceB)) return CreateService2_0AddDisposable();
            if (serviceType == typeof(global::Interface2)) return CreateService2_0AddDisposable();
            if (serviceType == typeof(global::Service3)) return _root.CreateService3_0();
            if (serviceType == typeof(global::Interface3)) return _root.CreateService3_0();
            if (serviceType == typeof(global::Service4)) return _root.CreateService4_0();
            if (serviceType == typeof(global::Interface4)) return _root.CreateService4_0();
            if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::System.IServiceProvider)) return this;
            if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope)) return this;

            return null;
        }

        private T GetService<T>()
        {
            return (T)GetService(typeof(T))!;
        }

        private global::Service1 CreateService1_0AddDisposable()
        {
            global::Service1 service = _root.CreateService1_0();
            AddDisposable(service);

            return service;
        }

        private global::Service2 CreateService2_0AddDisposable()
        {
            global::Service2 service = _root.CreateService2_0();
            AddAsyncDisposable(service);

            return service;
        }

        public void Dispose()
        {
            lock (_sync)
            {
                if (_isDisposed)
                {
                    return;
                }

                _isDisposed = true;
            }

            if (_transientDisposables != null)
            {
                for (int i = _transientDisposables.Count - 1; i >= 0; i--)
                {
                    _transientDisposables[i].Dispose();
                }
            }
        }

        public async global::System.Threading.Tasks.ValueTask DisposeAsync()
        {
            lock (_sync)
            {
                if (_isDisposed)
                {
                    return;
                }

                _isDisposed = true;
            }

            if (_transientDisposables != null)
            {
                for (int i = _transientDisposables.Count - 1; i >= 0; i--)
                {
                    _transientDisposables[i].Dispose();
                }
            }

            if (_transientAsyncDisposables != null)
            {
                for (int i = _transientAsyncDisposables.Count - 1; i >= 0; i--)
                {
                    await _transientAsyncDisposables[i].DisposeAsync();
                }
            }
        }

        private void ThrowIfDisposed()
        {
            if (_isDisposed)
            {
                throw new global::System.ObjectDisposedException("Provider.Scope");
            }
        }

        private void AddDisposable(global::System.IDisposable disposable)
        {
            lock (_sync)
            {
                ThrowIfDisposed();

                if (_transientDisposables == null)
                {
                    _transientDisposables = new global::System.Collections.Generic.List<global::System.IDisposable>();
                }

                _transientDisposables.Add(disposable);
            }
        }

        private void AddAsyncDisposable(global::System.IAsyncDisposable disposable)
        {
            lock (_sync)
            {
                ThrowIfDisposed();

                if (_transientAsyncDisposables == null)
                {
                    _transientAsyncDisposables = new global::System.Collections.Generic.List<global::System.IAsyncDisposable>();
                }

                _transientAsyncDisposables.Add(disposable);
            }
        }
    }
}