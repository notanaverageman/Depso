// <auto-generated/>

#nullable enable

public partial class Provider
    :
    global::System.IDisposable,
    global::System.IAsyncDisposable,
    global::System.IServiceProvider,
    global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,
    global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService
{
    private readonly object _sync = new object();

    private global::Provider.Scope? _rootScope;
    private global::Provider.Scope RootScope => _rootScope ??= CreateScope(_sync);

    private bool _isDisposed;
    private global::System.Collections.Generic.List<global::System.IDisposable>? _transientDisposables;
    private global::System.Collections.Generic.List<global::System.IAsyncDisposable>? _transientAsyncDisposables;

    global::Microsoft.Extensions.DependencyInjection.IServiceScope global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory.CreateScope() => this.CreateScope(_sync);

    public object? GetService(global::System.Type serviceType)
    {
        if (serviceType == typeof(global::Interface1)) return CreateService1_0AddDisposable();
        if (serviceType == typeof(global::Service1)) return CreateService1_0AddDisposable();
        if (serviceType == typeof(global::InterfaceA)) return CreateService1_0AddDisposable();
        if (serviceType == typeof(global::Service2)) return CreateService2_0AddDisposable();
        if (serviceType == typeof(global::InterfaceB)) return CreateService2_0AddDisposable();
        if (serviceType == typeof(global::Interface2)) return CreateService2_0AddDisposable();
        if (serviceType == typeof(global::Service3)) return CreateService3_0();
        if (serviceType == typeof(global::Interface3)) return CreateService3_0();
        if (serviceType == typeof(global::Service4)) return CreateService4_0();
        if (serviceType == typeof(global::Interface4)) return CreateService4_0();
        if (serviceType == typeof(global::System.IServiceProvider)) return this;
        if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)) return this;
        if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService)) return this;
        if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope)) return RootScope.GetService(serviceType);

        return null;
    }

    private T GetService<T>()
    {
        return (T)GetService(typeof(T))!;
    }

    private global::Service1 CreateService1_0()
    {
        return new global::Service1();
    }

    private global::Service1 CreateService1_0AddDisposable()
    {
        global::Service1 service = CreateService1_0();
        AddDisposable(service);

        return service;
    }

    private global::Service2 CreateService2_0()
    {
        return new global::Service2();
    }

    private global::Service2 CreateService2_0AddDisposable()
    {
        global::Service2 service = CreateService2_0();
        AddAsyncDisposable(service);

        return service;
    }

    private global::Service3 CreateService3_0()
    {
        return new global::Service3(GetService<global::Interface1>());
    }

    private global::Service4 CreateService4_0()
    {
        return new global::Service4(
            GetService<global::Interface1>(),
            GetService<global::InterfaceA>(),
            GetService<global::Interface2>(),
            GetService<global::Interface3>(),
            GetService<global::Service1>(),
            GetService<global::Service2>()
        );
    }

    private global::Provider.Scope CreateScope(object? sync)
    {
        ThrowIfDisposed();
        return new global::Provider.Scope(this, sync);
    }

    public bool IsService(global::System.Type serviceType)
    {
        if (serviceType.IsGenericType && serviceType.GetGenericTypeDefinition() == typeof(global::System.Collections.Generic.IEnumerable<>))
        {
            serviceType = serviceType.GetGenericArguments()[0];
        }

        return false
            || serviceType == typeof(global::Interface1)
            || serviceType == typeof(global::Interface2)
            || serviceType == typeof(global::Interface3)
            || serviceType == typeof(global::Interface4)
            || serviceType == typeof(global::InterfaceA)
            || serviceType == typeof(global::InterfaceB)
            || serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService)
            || serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope)
            || serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
            || serviceType == typeof(global::Service1)
            || serviceType == typeof(global::Service2)
            || serviceType == typeof(global::Service3)
            || serviceType == typeof(global::Service4)
            || serviceType == typeof(global::System.IServiceProvider);
    }

    public void Dispose()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_transientDisposables != null)
        {
            for (int i = _transientDisposables.Count - 1; i >= 0; i--)
            {
                _transientDisposables[i].Dispose();
            }
        }

        if (_rootScope != null) _rootScope.Dispose();
    }

    public async global::System.Threading.Tasks.ValueTask DisposeAsync()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_transientDisposables != null)
        {
            for (int i = _transientDisposables.Count - 1; i >= 0; i--)
            {
                _transientDisposables[i].Dispose();
            }
        }

        if (_transientAsyncDisposables != null)
        {
            for (int i = _transientAsyncDisposables.Count - 1; i >= 0; i--)
            {
                await _transientAsyncDisposables[i].DisposeAsync();
            }
        }

        if (_rootScope != null) await _rootScope.DisposeAsync();
    }

    private void ThrowIfDisposed()
    {
        if (_isDisposed)
        {
            throw new global::System.ObjectDisposedException("Provider");
        }
    }

    private void AddDisposable(global::System.IDisposable disposable)
    {
        lock (_sync)
        {
            ThrowIfDisposed();

            if (_transientDisposables == null)
            {
                _transientDisposables = new global::System.Collections.Generic.List<global::System.IDisposable>();
            }

            _transientDisposables.Add(disposable);
        }
    }

    private void AddAsyncDisposable(global::System.IAsyncDisposable disposable)
    {
        lock (_sync)
        {
            ThrowIfDisposed();

            if (_transientAsyncDisposables == null)
            {
                _transientAsyncDisposables = new global::System.Collections.Generic.List<global::System.IAsyncDisposable>();
            }

            _transientAsyncDisposables.Add(disposable);
        }
    }
}