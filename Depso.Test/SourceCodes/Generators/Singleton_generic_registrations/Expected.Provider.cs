// <auto-generated/>

#nullable enable

public partial class Provider
    :
    global::System.IDisposable,
    global::System.IAsyncDisposable,
    global::System.IServiceProvider,
    global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,
    global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService
{
    private readonly object _sync = new object();

    private global::Provider.Scope? _rootScope;
    private global::Provider.Scope RootScope => _rootScope ??= CreateScope(_sync);

    private bool _isDisposed;

    private global::Service1? _service1_0;
    private global::Service1 Service1_0 => _service1_0 ??= CreateService1();

    private global::Service1? _service1_1;
    private global::Service1 Service1_1 => _service1_1 ??= CreateService1();

    private global::Service2? _service2_0;
    private global::Service2 Service2_0 => _service2_0 ??= CreateService2();

    private global::Service2? _service2_1;
    private global::Service2 Service2_1 => _service2_1 ??= CreateService2();

    global::Microsoft.Extensions.DependencyInjection.IServiceScope global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory.CreateScope() => this.CreateScope(_sync);

    public object? GetService(global::System.Type serviceType)
    {
        if (serviceType == typeof(global::Interface1)) return Service1_0;
        if (serviceType == typeof(global::Service1)) return Service1_0;
        if (serviceType == typeof(global::InterfaceA)) return Service1_1;
        if (serviceType == typeof(global::Service2)) return Service2_1;
        if (serviceType == typeof(global::InterfaceB)) return Service2_0;
        if (serviceType == typeof(global::Interface2)) return Service2_0;

        return null;
    }

    private T GetService<T>()
    {
        return (T)GetService(typeof(T))!;
    }

    private global::Service1 CreateService1()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Service1();
        }
    }

    private global::Service2 CreateService2()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Service2();
        }
    }

    private global::Provider.Scope CreateScope(object? sync)
    {
        ThrowIfDisposed();
        return new global::Provider.Scope(this, sync);
    }

    public bool IsService(global::System.Type serviceType)
    {
        if (serviceType.IsGenericType && serviceType.GetGenericTypeDefinition() == typeof(global::System.Collections.Generic.IEnumerable<>))
        {
            serviceType = serviceType.GetGenericArguments()[0];
        }

        return false
            || serviceType == typeof(global::Interface1)
            || serviceType == typeof(global::Interface2)
            || serviceType == typeof(global::InterfaceA)
            || serviceType == typeof(global::InterfaceB)
            || serviceType == typeof(global::Service1)
            || serviceType == typeof(global::Service2);
    }

    public void Dispose()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_rootScope != null) _rootScope.Dispose();

        if (_service1_0 != null) _service1_0.Dispose();
        if (_service1_1 != null) _service1_1.Dispose();
    }

    public async global::System.Threading.Tasks.ValueTask DisposeAsync()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_rootScope != null) await _rootScope.DisposeAsync();

        if (_service2_0 != null) await _service2_0.DisposeAsync();
        if (_service2_1 != null) await _service2_1.DisposeAsync();
        if (_service1_0 != null) _service1_0.Dispose();
        if (_service1_1 != null) _service1_1.Dispose();
    }

    private void ThrowIfDisposed()
    {
        if (_isDisposed)
        {
            throw new global::System.ObjectDisposedException("Provider");
        }
    }
}