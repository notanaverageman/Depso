// <auto-generated/>

#nullable enable

public partial class Provider
    :
    global::System.IDisposable,
    global::System.IAsyncDisposable,
    global::System.IServiceProvider
{
    private readonly object _sync = new object();

    private global::Provider.Scope? _rootScope;
    private global::Provider.Scope RootScope => _rootScope ??= CreateScope(_sync);

    private bool _isDisposed;

    public object? GetService(global::System.Type serviceType)
    {
        if (serviceType == typeof(global::Service1)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::InterfaceA)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Interface1)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::System.Exception)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::System.Collections.Generic.List<global::System.IDisposable>)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::InterfaceC)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Service2)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::InterfaceB)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Interface2)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::System.Collections.Generic.List<global::System.Action>)) return RootScope.GetService(serviceType);

        return null;
    }

    private T GetService<T>()
    {
        return (T)GetService(typeof(T))!;
    }

    private global::Provider.Scope CreateScope(object? sync)
    {
        ThrowIfDisposed();
        return new global::Provider.Scope(this, sync);
    }

    public void Dispose()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_rootScope != null) _rootScope.Dispose();
    }

    public async global::System.Threading.Tasks.ValueTask DisposeAsync()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_rootScope != null) await _rootScope.DisposeAsync();
    }

    private void ThrowIfDisposed()
    {
        if (_isDisposed)
        {
            throw new global::System.ObjectDisposedException("Provider");
        }
    }
}