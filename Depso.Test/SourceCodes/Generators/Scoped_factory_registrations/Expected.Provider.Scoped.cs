// <auto-generated/>

#nullable enable

public partial class Provider
{
    public class Scope
        :
        global::System.IDisposable,
        global::System.IAsyncDisposable,
        global::System.IServiceProvider,
        global::Microsoft.Extensions.DependencyInjection.IServiceScope
    {
        private readonly object _sync = new object();
        private readonly global::Provider _root;

        private bool _isDisposed;

        private global::Service1? _service1_0;
        private global::Service1 Service1_0 => _service1_0 ??= FactoryService1_0();

        private global::System.Exception? _exception_0;
        private global::System.Exception Exception_0 => _exception_0 ??= FactoryException_0();

        private global::System.Collections.Generic.List<global::System.IDisposable>? _list1_0;
        private global::System.Collections.Generic.List<global::System.IDisposable> List1_0 => _list1_0 ??= FactoryList1_0();

        private global::InterfaceC? _interfaceC_0;
        private global::InterfaceC InterfaceC_0 => _interfaceC_0 ??= FactoryInterfaceC_0();

        private global::InterfaceA? _interfaceA_0;
        private global::InterfaceA InterfaceA_0 => _interfaceA_0 ??= FactoryInterfaceA_0();

        private global::Service2? _service2_0;
        private global::Service2 Service2_0 => _service2_0 ??= FactoryService2_0();

        private global::System.Collections.Generic.List<global::System.Action>? _list1_1;
        private global::System.Collections.Generic.List<global::System.Action> List1_1 => _list1_1 ??= FactoryList1_1();

        private global::Service2? _service2_1;
        private global::Service2 Service2_1 => _service2_1 ??= FactoryService2_1();

        private global::Service2? _service2_2;
        private global::Service2 Service2_2 => _service2_2 ??= FactoryService2_2();

        global::System.IServiceProvider global::Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider => this;

        public Scope(global::Provider root, object? sync)
        {
            _root = root;

            if (sync != null)
            {
                _sync = sync;
            }
        }

        public object? GetService(global::System.Type serviceType)
        {
            if (serviceType == typeof(global::Service1)) return Service1_0;
            if (serviceType == typeof(global::InterfaceA)) return Service1_0;
            if (serviceType == typeof(global::Interface1)) return Service1_0;
            if (serviceType == typeof(global::System.Exception)) return Exception_0;
            if (serviceType == typeof(global::System.Collections.Generic.List<global::System.IDisposable>)) return List1_0;
            if (serviceType == typeof(global::InterfaceC)) return InterfaceC_0;
            if (serviceType == typeof(global::Service2)) return Service2_0;
            if (serviceType == typeof(global::InterfaceB)) return Service2_0;
            if (serviceType == typeof(global::Interface2)) return Service2_0;
            if (serviceType == typeof(global::System.Collections.Generic.List<global::System.Action>)) return List1_1;
            if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::System.IServiceProvider)) return this;
            if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope)) return this;

            return null;
        }

        private T GetService<T>()
        {
            return (T)GetService(typeof(T))!;
        }

        private global::Service1 FactoryService1_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::Service1();
            }
        }

        private global::System.Exception FactoryException_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::System.Exception();
            }
        }

        private global::System.Collections.Generic.List<global::System.IDisposable> FactoryList1_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::System.Collections.Generic.List<global::System.IDisposable>();
            }
        }

        private global::InterfaceC FactoryInterfaceC_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return (global::InterfaceC)this.GetService(typeof(global::Service2));
            }
        }

        private global::InterfaceA FactoryInterfaceA_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return _root.Func(this);
            }
        }

        private global::Service2 FactoryService2_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return _root.GetService2(this);
            }
        }

        private global::System.Collections.Generic.List<global::System.Action> FactoryList1_1()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::System.Collections.Generic.List<global::System.Action>();
            }
        }

        private global::Service2 FactoryService2_1()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return global::StaticClass.StaticFunc(this);
            }
        }

        private global::Service2 FactoryService2_2()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return global::StaticClass.StaticFunc2(this);
            }
        }

        public void Dispose()
        {
            lock (_sync)
            {
                if (_isDisposed)
                {
                    return;
                }

                _isDisposed = true;
            }

            if (_service1_0 != null) _service1_0.Dispose();
            if (_interfaceA_0 != null) _interfaceA_0.Dispose();
        }

        public async global::System.Threading.Tasks.ValueTask DisposeAsync()
        {
            lock (_sync)
            {
                if (_isDisposed)
                {
                    return;
                }

                _isDisposed = true;
            }

            if (_service1_0 != null) _service1_0.Dispose();
            if (_interfaceA_0 != null) _interfaceA_0.Dispose();
            if (_service2_0 != null) await _service2_0.DisposeAsync();
            if (_service2_1 != null) await _service2_1.DisposeAsync();
            if (_service2_2 != null) await _service2_2.DisposeAsync();
        }

        private void ThrowIfDisposed()
        {
            if (_isDisposed)
            {
                throw new global::System.ObjectDisposedException("Provider.Scope");
            }
        }
    }
}