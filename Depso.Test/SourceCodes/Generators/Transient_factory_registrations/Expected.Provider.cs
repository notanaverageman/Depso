// <auto-generated/>

#nullable enable

public partial class Provider
    :
    global::System.IDisposable,
    global::System.IAsyncDisposable,
    global::System.IServiceProvider
{
    private readonly object _sync = new object();

    private global::Provider.Scope? _rootScope;
    private global::Provider.Scope RootScope => _rootScope ??= CreateScope(_sync);

    private bool _isDisposed;
    private global::System.Collections.Generic.List<global::System.IDisposable>? _transientDisposables;
    private global::System.Collections.Generic.List<global::System.IAsyncDisposable>? _transientAsyncDisposables;

    public object? GetService(global::System.Type serviceType)
    {
        if (serviceType == typeof(global::Service1)) return FactoryService1_0AddDisposable();
        if (serviceType == typeof(global::InterfaceA)) return FactoryInterfaceA_0AddDisposable();
        if (serviceType == typeof(global::Interface1)) return FactoryService1_0AddDisposable();
        if (serviceType == typeof(global::System.Exception)) return FactoryException_0();
        if (serviceType == typeof(global::System.Collections.Generic.List<global::System.IDisposable>)) return FactoryList1_0();
        if (serviceType == typeof(global::InterfaceC)) return FactoryInterfaceC_0();
        if (serviceType == typeof(global::Service2)) return FactoryService2_2AddDisposable();
        if (serviceType == typeof(global::InterfaceB)) return FactoryService2_0AddDisposable();
        if (serviceType == typeof(global::Interface2)) return FactoryService2_0AddDisposable();
        if (serviceType == typeof(global::System.Collections.Generic.List<global::System.Action>)) return FactoryList1_1();

        return null;
    }

    private T GetService<T>()
    {
        return (T)GetService(typeof(T))!;
    }

    private global::Service1 FactoryService1_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Service1();
        }
    }

    private global::Service1 FactoryService1_0AddDisposable()
    {
        global::Service1 service = FactoryService1_0();
        AddDisposable(service);

        return service;
    }

    private global::System.Exception FactoryException_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::System.Exception();
        }
    }

    private global::System.Collections.Generic.List<global::System.IDisposable> FactoryList1_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::System.Collections.Generic.List<global::System.IDisposable>();
        }
    }

    private global::InterfaceC FactoryInterfaceC_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return (global::InterfaceC)this.GetService(typeof(global::Service2));
        }
    }

    private global::InterfaceA FactoryInterfaceA_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return Func(this);
        }
    }

    private global::InterfaceA FactoryInterfaceA_0AddDisposable()
    {
        global::InterfaceA service = FactoryInterfaceA_0();
        AddDisposable(service);

        return service;
    }

    private global::Service2 FactoryService2_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return GetService2(this);
        }
    }

    private global::Service2 FactoryService2_0AddDisposable()
    {
        global::Service2 service = FactoryService2_0();
        AddAsyncDisposable(service);

        return service;
    }

    private global::System.Collections.Generic.List<global::System.Action> FactoryList1_1()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::System.Collections.Generic.List<global::System.Action>();
        }
    }

    private global::Service2 FactoryService2_1()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return global::StaticClass.StaticFunc(this);
        }
    }

    private global::Service2 FactoryService2_1AddDisposable()
    {
        global::Service2 service = FactoryService2_1();
        AddAsyncDisposable(service);

        return service;
    }

    private global::Service2 FactoryService2_2()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return global::StaticClass.StaticFunc2(this);
        }
    }

    private global::Service2 FactoryService2_2AddDisposable()
    {
        global::Service2 service = FactoryService2_2();
        AddAsyncDisposable(service);

        return service;
    }

    private global::Provider.Scope CreateScope(object? sync)
    {
        ThrowIfDisposed();
        return new global::Provider.Scope(this, sync);
    }

    public void Dispose()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_transientDisposables != null)
        {
            for (int i = _transientDisposables.Count - 1; i >= 0; i--)
            {
                _transientDisposables[i].Dispose();
            }
        }

        if (_rootScope != null) _rootScope.Dispose();
    }

    public async global::System.Threading.Tasks.ValueTask DisposeAsync()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_transientDisposables != null)
        {
            for (int i = _transientDisposables.Count - 1; i >= 0; i--)
            {
                _transientDisposables[i].Dispose();
            }
        }

        if (_transientAsyncDisposables != null)
        {
            for (int i = _transientAsyncDisposables.Count - 1; i >= 0; i--)
            {
                await _transientAsyncDisposables[i].DisposeAsync();
            }
        }

        if (_rootScope != null) await _rootScope.DisposeAsync();
    }

    private void ThrowIfDisposed()
    {
        if (_isDisposed)
        {
            throw new global::System.ObjectDisposedException("Provider");
        }
    }

    private void AddDisposable(global::System.IDisposable disposable)
    {
        lock (_sync)
        {
            ThrowIfDisposed();

            if (_transientDisposables == null)
            {
                _transientDisposables = new global::System.Collections.Generic.List<global::System.IDisposable>();
            }

            _transientDisposables.Add(disposable);
        }
    }

    private void AddAsyncDisposable(global::System.IAsyncDisposable disposable)
    {
        lock (_sync)
        {
            ThrowIfDisposed();

            if (_transientAsyncDisposables == null)
            {
                _transientAsyncDisposables = new global::System.Collections.Generic.List<global::System.IAsyncDisposable>();
            }

            _transientAsyncDisposables.Add(disposable);
        }
    }
}