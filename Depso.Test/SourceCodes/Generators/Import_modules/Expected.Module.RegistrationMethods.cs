// <auto-generated/>

#nullable enable

public partial class Module
{
    private class RegistrationModifier
    {
        public static readonly global::Module.RegistrationModifier Instance;

        static RegistrationModifier()
        {
            Instance = new global::Module.RegistrationModifier();
        }

        private RegistrationModifier()
        {
        }

        public global::Module.RegistrationModifier AlsoAsSelf()
        {
            return this;
        }

        public global::Module.RegistrationModifier AlsoAs(global::System.Type type)
        {
            return this;
        }

        public global::Module.RegistrationModifier AlsoAs<T>()
        {
            return this;
        }
    }

    private static global::Module.RegistrationModifier ImportModule<T>()
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier ImportModule(global::System.Type moduleType)
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddSingleton(global::System.Type serviceType)
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddSingleton(global::System.Type serviceType, global::System.Type implementationType)
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddSingleton<TService>()
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddSingleton<TService, TImplementation>() where TImplementation : TService
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddSingleton<TService>(global::System.Func<global::System.IServiceProvider, TService> factory)
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddScoped(global::System.Type serviceType)
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddScoped(global::System.Type serviceType, global::System.Type implementationType)
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddScoped<TService>()
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddScoped<TService, TImplementation>() where TImplementation : TService
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddScoped<TService>(global::System.Func<global::System.IServiceProvider, TService> factory)
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddTransient(global::System.Type serviceType)
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddTransient(global::System.Type serviceType, global::System.Type implementationType)
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddTransient<TService>()
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddTransient<TService, TImplementation>() where TImplementation : TService
    {
        return global::Module.RegistrationModifier.Instance;
    }

    private static global::Module.RegistrationModifier AddTransient<TService>(global::System.Func<global::System.IServiceProvider, TService> factory)
    {
        return global::Module.RegistrationModifier.Instance;
    }
}