// <auto-generated/>

#nullable enable

public partial class Provider
{
    public class Scope
        :
        global::System.IDisposable,
        global::System.IAsyncDisposable,
        global::System.IServiceProvider,
        global::Microsoft.Extensions.DependencyInjection.IServiceScope
    {
        private readonly object _sync = new object();
        private readonly global::Provider _root;

        private bool _isDisposed;

        private global::Test.Nested.Scoped1? _scoped1_0;
        private global::Test.Nested.Scoped1 Scoped1_0 => _scoped1_0 ??= CreateScoped1();

        private global::Test.Nested.Scoped2? _scoped2_0;
        private global::Test.Nested.Scoped2 Scoped2_0 => _scoped2_0 ??= CreateScoped2();

        private global::Test.Nested.Scoped4? _scoped4_0;
        private global::Test.Nested.Scoped4 Scoped4_0 => _scoped4_0 ??= CreateScoped4();

        private global::Test.Nested.Scoped5? _scoped5_0;
        private global::Test.Nested.Scoped5 Scoped5_0 => _scoped5_0 ??= CreateScoped5();

        private global::ExternalScoped1? _externalScoped1_0;
        private global::ExternalScoped1 ExternalScoped1_0 => _externalScoped1_0 ??= CreateExternalScoped1();

        private global::ExternalScoped2? _externalScoped2_0;
        private global::ExternalScoped2 ExternalScoped2_0 => _externalScoped2_0 ??= CreateExternalScoped2();

        private global::ExternalScoped4? _externalScoped4_0;
        private global::ExternalScoped4 ExternalScoped4_0 => _externalScoped4_0 ??= CreateExternalScoped4();

        private global::ExternalScoped5? _externalScoped5_0;
        private global::ExternalScoped5 ExternalScoped5_0 => _externalScoped5_0 ??= CreateExternalScoped5();

        private global::Test.Nested.Scoped3? _scoped3_0;
        private global::Test.Nested.Scoped3 Scoped3_0 => _scoped3_0 ??= FactoryScoped3_0();

        private global::Test.Nested.ScopedInterface6? _scopedInterface6_0;
        private global::Test.Nested.ScopedInterface6 ScopedInterface6_0 => _scopedInterface6_0 ??= FactoryScopedInterface6_0();

        private global::ExternalScoped3? _externalScoped3_0;
        private global::ExternalScoped3 ExternalScoped3_0 => _externalScoped3_0 ??= FactoryExternalScoped3_0();

        private global::ExternalScopedInterface6? _externalScopedInterface6_0;
        private global::ExternalScopedInterface6 ExternalScopedInterface6_0 => _externalScopedInterface6_0 ??= FactoryExternalScopedInterface6_0();

        global::System.IServiceProvider global::Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider => this;

        public Scope(global::Provider root, object? sync)
        {
            _root = root;

            if (sync != null)
            {
                _sync = sync;
            }
        }

        public object? GetService(global::System.Type serviceType)
        {
            if (serviceType == typeof(global::Test.Nested.Singleton1)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Test.Nested.SingletonInterface1)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Test.Nested.Singleton2)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Test.Nested.SingletonInterface2)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Test.Nested.Singleton3)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Test.Nested.SingletonInterface4)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Test.Nested.Singleton4)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Test.Nested.SingletonInterface5)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Test.Nested.SingletonInterface6)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::ExternalSingleton1)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::ExternalSingletonInterface1)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::ExternalSingleton2)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::ExternalSingletonInterface2)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::ExternalSingleton3)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::ExternalSingletonInterface4)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::ExternalSingleton4)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::ExternalSingletonInterface5)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::ExternalSingletonInterface6)) return _root.GetService(serviceType);
            if (serviceType == typeof(global::Test.Nested.Scoped1)) return Scoped1_0;
            if (serviceType == typeof(global::Test.Nested.ScopedInterface1)) return Scoped2_0;
            if (serviceType == typeof(global::Test.Nested.Scoped2)) return Scoped2_0;
            if (serviceType == typeof(global::Test.Nested.ScopedInterface2)) return Scoped2_0;
            if (serviceType == typeof(global::Test.Nested.Scoped3)) return Scoped3_0;
            if (serviceType == typeof(global::Test.Nested.ScopedInterface4)) return Scoped4_0;
            if (serviceType == typeof(global::Test.Nested.Scoped4)) return Scoped4_0;
            if (serviceType == typeof(global::Test.Nested.ScopedInterface5)) return Scoped5_0;
            if (serviceType == typeof(global::Test.Nested.ScopedInterface6)) return ScopedInterface6_0;
            if (serviceType == typeof(global::ExternalScoped1)) return ExternalScoped1_0;
            if (serviceType == typeof(global::ExternalScopedInterface1)) return ExternalScoped2_0;
            if (serviceType == typeof(global::ExternalScoped2)) return ExternalScoped2_0;
            if (serviceType == typeof(global::ExternalScopedInterface2)) return ExternalScoped2_0;
            if (serviceType == typeof(global::ExternalScoped3)) return ExternalScoped3_0;
            if (serviceType == typeof(global::ExternalScopedInterface4)) return ExternalScoped4_0;
            if (serviceType == typeof(global::ExternalScoped4)) return ExternalScoped4_0;
            if (serviceType == typeof(global::ExternalScopedInterface5)) return ExternalScoped5_0;
            if (serviceType == typeof(global::ExternalScopedInterface6)) return ExternalScopedInterface6_0;
            if (serviceType == typeof(global::Test.Nested.Transient1)) return _root.CreateTransient1();
            if (serviceType == typeof(global::Test.Nested.TransientInterface1)) return _root.CreateTransient2();
            if (serviceType == typeof(global::Test.Nested.Transient2)) return _root.CreateTransient2();
            if (serviceType == typeof(global::Test.Nested.TransientInterface2)) return _root.CreateTransient2();
            if (serviceType == typeof(global::Test.Nested.Transient3)) return _root.FactoryTransient3_0();
            if (serviceType == typeof(global::Test.Nested.TransientInterface4)) return _root.CreateTransient4();
            if (serviceType == typeof(global::Test.Nested.Transient4)) return _root.CreateTransient4();
            if (serviceType == typeof(global::Test.Nested.TransientInterface5)) return _root.CreateTransient5();
            if (serviceType == typeof(global::Test.Nested.TransientInterface6)) return _root.FactoryTransientInterface6_0();
            if (serviceType == typeof(global::ExternalTransient1)) return _root.CreateExternalTransient1();
            if (serviceType == typeof(global::ExternalTransientInterface1)) return _root.CreateExternalTransient2();
            if (serviceType == typeof(global::ExternalTransient2)) return _root.CreateExternalTransient2();
            if (serviceType == typeof(global::ExternalTransientInterface2)) return _root.CreateExternalTransient2();
            if (serviceType == typeof(global::ExternalTransient3)) return _root.FactoryExternalTransient3_0();
            if (serviceType == typeof(global::ExternalTransientInterface4)) return _root.CreateExternalTransient4();
            if (serviceType == typeof(global::ExternalTransient4)) return _root.CreateExternalTransient4();
            if (serviceType == typeof(global::ExternalTransientInterface5)) return _root.CreateExternalTransient5();
            if (serviceType == typeof(global::ExternalTransientInterface6)) return _root.FactoryExternalTransientInterface6_0();

            return null;
        }

        private T GetService<T>()
        {
            return (T)GetService(typeof(T))!;
        }

        private global::Test.Nested.Scoped1 CreateScoped1()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::Test.Nested.Scoped1();
            }
        }

        private global::Test.Nested.Scoped2 CreateScoped2()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::Test.Nested.Scoped2();
            }
        }

        private global::Test.Nested.Scoped3 FactoryScoped3_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::Test.Nested.Scoped3();
            }
        }

        private global::Test.Nested.Scoped4 CreateScoped4()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::Test.Nested.Scoped4();
            }
        }

        private global::Test.Nested.Scoped5 CreateScoped5()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::Test.Nested.Scoped5();
            }
        }

        private global::Test.Nested.ScopedInterface6 FactoryScopedInterface6_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();

                global::Test.Nested.ScopedInterface5 scopedInterface5 = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Test.Nested.ScopedInterface5>(this);
                return new global::Test.Nested.Scoped6(scopedInterface5);
            }
        }

        private global::ExternalScoped1 CreateExternalScoped1()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::ExternalScoped1();
            }
        }

        private global::ExternalScoped2 CreateExternalScoped2()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::ExternalScoped2();
            }
        }

        private global::ExternalScoped3 FactoryExternalScoped3_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return global::ExternalModule.FactoryExternalScoped3_0(this);
            }
        }

        private global::ExternalScoped4 CreateExternalScoped4()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::ExternalScoped4();
            }
        }

        private global::ExternalScoped5 CreateExternalScoped5()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return new global::ExternalScoped5();
            }
        }

        private global::ExternalScopedInterface6 FactoryExternalScopedInterface6_0()
        {
            lock (_sync)
            {
                ThrowIfDisposed();
                return global::ExternalModule.FactoryExternalScopedInterface6_0(this);
            }
        }

        public void Dispose()
        {
            lock (_sync)
            {
                if (_isDisposed)
                {
                    return;
                }

                _isDisposed = true;
            }
        }

        public global::System.Threading.Tasks.ValueTask DisposeAsync()
        {
            lock (_sync)
            {
                if (_isDisposed)
                {
                    return default;
                }

                _isDisposed = true;
            }

            return default;
        }

        private void ThrowIfDisposed()
        {
            if (_isDisposed)
            {
                throw new global::System.ObjectDisposedException("Provider.Scope");
            }
        }
    }
}