// <auto-generated/>

#nullable enable

public partial class Provider
    :
    global::System.IDisposable,
    global::System.IAsyncDisposable,
    global::System.IServiceProvider,
    global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,
    global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService
{
    private readonly object _sync = new object();

    private global::Provider.Scope? _rootScope;
    private global::Provider.Scope RootScope => _rootScope ??= CreateScope(_sync);

    private bool _isDisposed;

    private global::Test.Nested.Singleton1? _singleton1_0;
    private global::Test.Nested.Singleton1 Singleton1_0 => _singleton1_0 ??= CreateSingleton1_0();

    private global::Test.Nested.Singleton2? _singleton2_0;
    private global::Test.Nested.Singleton2 Singleton2_0 => _singleton2_0 ??= CreateSingleton2_0();

    private global::Test.Nested.Singleton4? _singleton4_0;
    private global::Test.Nested.Singleton4 Singleton4_0 => _singleton4_0 ??= CreateSingleton4_0();

    private global::Test.Nested.Singleton5? _singleton5_0;
    private global::Test.Nested.Singleton5 Singleton5_0 => _singleton5_0 ??= CreateSingleton5_0();

    private global::ExternalSingleton1? _externalSingleton1_0;
    private global::ExternalSingleton1 ExternalSingleton1_0 => _externalSingleton1_0 ??= CreateExternalSingleton1_0();

    private global::ExternalSingleton2? _externalSingleton2_0;
    private global::ExternalSingleton2 ExternalSingleton2_0 => _externalSingleton2_0 ??= CreateExternalSingleton2_0();

    private global::ExternalSingleton4? _externalSingleton4_0;
    private global::ExternalSingleton4 ExternalSingleton4_0 => _externalSingleton4_0 ??= CreateExternalSingleton4_0();

    private global::ExternalSingleton5? _externalSingleton5_0;
    private global::ExternalSingleton5 ExternalSingleton5_0 => _externalSingleton5_0 ??= CreateExternalSingleton5_0();

    private global::Test.Nested.Singleton3? _singleton3_0;
    private global::Test.Nested.Singleton3 Singleton3_0 => _singleton3_0 ??= FactorySingleton3_0();

    private global::Test.Nested.SingletonInterface6? _singletonInterface6_0;
    private global::Test.Nested.SingletonInterface6 SingletonInterface6_0 => _singletonInterface6_0 ??= FactorySingletonInterface6_0();

    private global::ExternalSingleton3? _externalSingleton3_0;
    private global::ExternalSingleton3 ExternalSingleton3_0 => _externalSingleton3_0 ??= FactoryExternalSingleton3_0();

    private global::ExternalSingletonInterface6? _externalSingletonInterface6_0;
    private global::ExternalSingletonInterface6 ExternalSingletonInterface6_0 => _externalSingletonInterface6_0 ??= FactoryExternalSingletonInterface6_0();

    global::Microsoft.Extensions.DependencyInjection.IServiceScope global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory.CreateScope() => this.CreateScope(_sync);

    public object? GetService(global::System.Type serviceType)
    {
        if (serviceType == typeof(global::Test.Nested.Singleton1)) return Singleton1_0;
        if (serviceType == typeof(global::Test.Nested.SingletonInterface1)) return Singleton2_0;
        if (serviceType == typeof(global::Test.Nested.Singleton2)) return Singleton2_0;
        if (serviceType == typeof(global::Test.Nested.SingletonInterface2)) return Singleton2_0;
        if (serviceType == typeof(global::Test.Nested.Singleton3)) return Singleton3_0;
        if (serviceType == typeof(global::Test.Nested.SingletonInterface4)) return Singleton4_0;
        if (serviceType == typeof(global::Test.Nested.Singleton4)) return Singleton4_0;
        if (serviceType == typeof(global::Test.Nested.SingletonInterface5)) return Singleton5_0;
        if (serviceType == typeof(global::Test.Nested.SingletonInterface6)) return SingletonInterface6_0;
        if (serviceType == typeof(global::ExternalSingleton1)) return ExternalSingleton1_0;
        if (serviceType == typeof(global::ExternalSingletonInterface1)) return ExternalSingleton2_0;
        if (serviceType == typeof(global::ExternalSingleton2)) return ExternalSingleton2_0;
        if (serviceType == typeof(global::ExternalSingletonInterface2)) return ExternalSingleton2_0;
        if (serviceType == typeof(global::ExternalSingleton3)) return ExternalSingleton3_0;
        if (serviceType == typeof(global::ExternalSingletonInterface4)) return ExternalSingleton4_0;
        if (serviceType == typeof(global::ExternalSingleton4)) return ExternalSingleton4_0;
        if (serviceType == typeof(global::ExternalSingletonInterface5)) return ExternalSingleton5_0;
        if (serviceType == typeof(global::ExternalSingletonInterface6)) return ExternalSingletonInterface6_0;
        if (serviceType == typeof(global::Test.Nested.Scoped1)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Test.Nested.ScopedInterface1)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Test.Nested.Scoped2)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Test.Nested.ScopedInterface2)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Test.Nested.Scoped3)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Test.Nested.ScopedInterface4)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Test.Nested.Scoped4)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Test.Nested.ScopedInterface5)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Test.Nested.ScopedInterface6)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::ExternalScoped1)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::ExternalScopedInterface1)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::ExternalScoped2)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::ExternalScopedInterface2)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::ExternalScoped3)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::ExternalScopedInterface4)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::ExternalScoped4)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::ExternalScopedInterface5)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::ExternalScopedInterface6)) return RootScope.GetService(serviceType);
        if (serviceType == typeof(global::Test.Nested.Transient1)) return CreateTransient1_0();
        if (serviceType == typeof(global::Test.Nested.TransientInterface1)) return CreateTransient2_0();
        if (serviceType == typeof(global::Test.Nested.Transient2)) return CreateTransient2_0();
        if (serviceType == typeof(global::Test.Nested.TransientInterface2)) return CreateTransient2_0();
        if (serviceType == typeof(global::Test.Nested.Transient3)) return FactoryTransient3_0();
        if (serviceType == typeof(global::Test.Nested.TransientInterface4)) return CreateTransient4_0();
        if (serviceType == typeof(global::Test.Nested.Transient4)) return CreateTransient4_0();
        if (serviceType == typeof(global::Test.Nested.TransientInterface5)) return CreateTransient5_0();
        if (serviceType == typeof(global::Test.Nested.TransientInterface6)) return FactoryTransientInterface6_0();
        if (serviceType == typeof(global::ExternalTransient1)) return CreateExternalTransient1_0();
        if (serviceType == typeof(global::ExternalTransientInterface1)) return CreateExternalTransient2_0();
        if (serviceType == typeof(global::ExternalTransient2)) return CreateExternalTransient2_0();
        if (serviceType == typeof(global::ExternalTransientInterface2)) return CreateExternalTransient2_0();
        if (serviceType == typeof(global::ExternalTransient3)) return FactoryExternalTransient3_0();
        if (serviceType == typeof(global::ExternalTransientInterface4)) return CreateExternalTransient4_0();
        if (serviceType == typeof(global::ExternalTransient4)) return CreateExternalTransient4_0();
        if (serviceType == typeof(global::ExternalTransientInterface5)) return CreateExternalTransient5_0();
        if (serviceType == typeof(global::ExternalTransientInterface6)) return FactoryExternalTransientInterface6_0();
        if (serviceType == typeof(global::System.IServiceProvider)) return this;
        if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)) return this;
        if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService)) return this;
        if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope)) return RootScope.GetService(serviceType);

        return null;
    }

    private T GetService<T>()
    {
        return (T)GetService(typeof(T))!;
    }

    private global::Test.Nested.Singleton1 CreateSingleton1_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Test.Nested.Singleton1();
        }
    }

    private global::Test.Nested.Singleton2 CreateSingleton2_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Test.Nested.Singleton2();
        }
    }

    private global::Test.Nested.Singleton3 FactorySingleton3_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Test.Nested.Singleton3();
        }
    }

    private global::Test.Nested.Singleton4 CreateSingleton4_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Test.Nested.Singleton4();
        }
    }

    private global::Test.Nested.Singleton5 CreateSingleton5_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Test.Nested.Singleton5();
        }
    }

    private global::Test.Nested.SingletonInterface6 FactorySingletonInterface6_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Test.Nested.Singleton6((global::Test.Nested.SingletonInterface5)this.GetService(typeof(global::Test.Nested.SingletonInterface5))!);
        }
    }

    private global::ExternalSingleton1 CreateExternalSingleton1_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::ExternalSingleton1();
        }
    }

    private global::ExternalSingleton2 CreateExternalSingleton2_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::ExternalSingleton2();
        }
    }

    private global::ExternalSingleton3 FactoryExternalSingleton3_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return global::ExternalModule.FactoryExternalSingleton3_0(this);
        }
    }

    private global::ExternalSingleton4 CreateExternalSingleton4_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::ExternalSingleton4();
        }
    }

    private global::ExternalSingleton5 CreateExternalSingleton5_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::ExternalSingleton5();
        }
    }

    private global::ExternalSingletonInterface6 FactoryExternalSingletonInterface6_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return global::ExternalModule.FactoryExternalSingletonInterface6_0(this);
        }
    }

    private global::Test.Nested.Transient1 CreateTransient1_0()
    {
        return new global::Test.Nested.Transient1();
    }

    private global::Test.Nested.Transient2 CreateTransient2_0()
    {
        return new global::Test.Nested.Transient2();
    }

    private global::Test.Nested.Transient3 FactoryTransient3_0()
    {
        return new global::Test.Nested.Transient3();
    }

    private global::Test.Nested.Transient4 CreateTransient4_0()
    {
        return new global::Test.Nested.Transient4();
    }

    private global::Test.Nested.Transient5 CreateTransient5_0()
    {
        return new global::Test.Nested.Transient5();
    }

    private global::Test.Nested.TransientInterface6 FactoryTransientInterface6_0()
    {
        return new global::Test.Nested.Transient6();
    }

    private global::ExternalTransient1 CreateExternalTransient1_0()
    {
        return new global::ExternalTransient1();
    }

    private global::ExternalTransient2 CreateExternalTransient2_0()
    {
        return new global::ExternalTransient2();
    }

    private global::ExternalTransient3 FactoryExternalTransient3_0()
    {
        return global::ExternalModule.FactoryExternalTransient3_0(this);
    }

    private global::ExternalTransient4 CreateExternalTransient4_0()
    {
        return new global::ExternalTransient4();
    }

    private global::ExternalTransient5 CreateExternalTransient5_0()
    {
        return new global::ExternalTransient5();
    }

    private global::ExternalTransientInterface6 FactoryExternalTransientInterface6_0()
    {
        return global::ExternalModule.FactoryExternalTransientInterface6_0(this);
    }

    private global::Provider.Scope CreateScope(object? sync)
    {
        ThrowIfDisposed();
        return new global::Provider.Scope(this, sync);
    }

    public bool IsService(global::System.Type serviceType)
    {
        if (serviceType.IsGenericType && serviceType.GetGenericTypeDefinition() == typeof(global::System.Collections.Generic.IEnumerable<>))
        {
            serviceType = serviceType.GetGenericArguments()[0];
        }

        return false
            || serviceType == typeof(global::ExternalScoped1)
            || serviceType == typeof(global::ExternalScoped2)
            || serviceType == typeof(global::ExternalScoped3)
            || serviceType == typeof(global::ExternalScoped4)
            || serviceType == typeof(global::ExternalScopedInterface1)
            || serviceType == typeof(global::ExternalScopedInterface2)
            || serviceType == typeof(global::ExternalScopedInterface4)
            || serviceType == typeof(global::ExternalScopedInterface5)
            || serviceType == typeof(global::ExternalScopedInterface6)
            || serviceType == typeof(global::ExternalSingleton1)
            || serviceType == typeof(global::ExternalSingleton2)
            || serviceType == typeof(global::ExternalSingleton3)
            || serviceType == typeof(global::ExternalSingleton4)
            || serviceType == typeof(global::ExternalSingletonInterface1)
            || serviceType == typeof(global::ExternalSingletonInterface2)
            || serviceType == typeof(global::ExternalSingletonInterface4)
            || serviceType == typeof(global::ExternalSingletonInterface5)
            || serviceType == typeof(global::ExternalSingletonInterface6)
            || serviceType == typeof(global::ExternalTransient1)
            || serviceType == typeof(global::ExternalTransient2)
            || serviceType == typeof(global::ExternalTransient3)
            || serviceType == typeof(global::ExternalTransient4)
            || serviceType == typeof(global::ExternalTransientInterface1)
            || serviceType == typeof(global::ExternalTransientInterface2)
            || serviceType == typeof(global::ExternalTransientInterface4)
            || serviceType == typeof(global::ExternalTransientInterface5)
            || serviceType == typeof(global::ExternalTransientInterface6)
            || serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService)
            || serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope)
            || serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
            || serviceType == typeof(global::System.IServiceProvider)
            || serviceType == typeof(global::Test.Nested.Scoped1)
            || serviceType == typeof(global::Test.Nested.Scoped2)
            || serviceType == typeof(global::Test.Nested.Scoped3)
            || serviceType == typeof(global::Test.Nested.Scoped4)
            || serviceType == typeof(global::Test.Nested.ScopedInterface1)
            || serviceType == typeof(global::Test.Nested.ScopedInterface2)
            || serviceType == typeof(global::Test.Nested.ScopedInterface4)
            || serviceType == typeof(global::Test.Nested.ScopedInterface5)
            || serviceType == typeof(global::Test.Nested.ScopedInterface6)
            || serviceType == typeof(global::Test.Nested.Singleton1)
            || serviceType == typeof(global::Test.Nested.Singleton2)
            || serviceType == typeof(global::Test.Nested.Singleton3)
            || serviceType == typeof(global::Test.Nested.Singleton4)
            || serviceType == typeof(global::Test.Nested.SingletonInterface1)
            || serviceType == typeof(global::Test.Nested.SingletonInterface2)
            || serviceType == typeof(global::Test.Nested.SingletonInterface4)
            || serviceType == typeof(global::Test.Nested.SingletonInterface5)
            || serviceType == typeof(global::Test.Nested.SingletonInterface6)
            || serviceType == typeof(global::Test.Nested.Transient1)
            || serviceType == typeof(global::Test.Nested.Transient2)
            || serviceType == typeof(global::Test.Nested.Transient3)
            || serviceType == typeof(global::Test.Nested.Transient4)
            || serviceType == typeof(global::Test.Nested.TransientInterface1)
            || serviceType == typeof(global::Test.Nested.TransientInterface2)
            || serviceType == typeof(global::Test.Nested.TransientInterface4)
            || serviceType == typeof(global::Test.Nested.TransientInterface5)
            || serviceType == typeof(global::Test.Nested.TransientInterface6);
    }

    public void Dispose()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_rootScope != null) _rootScope.Dispose();
    }

    public async global::System.Threading.Tasks.ValueTask DisposeAsync()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_rootScope != null) await _rootScope.DisposeAsync();
    }

    private void ThrowIfDisposed()
    {
        if (_isDisposed)
        {
            throw new global::System.ObjectDisposedException("Provider");
        }
    }
}