// <auto-generated/>

#nullable enable

namespace Test.Nested
{
    public partial class Module
    {
        private class RegistrationModifier
        {
            public static readonly global::Test.Nested.Module.RegistrationModifier Instance;

            static RegistrationModifier()
            {
                Instance = new global::Test.Nested.Module.RegistrationModifier();
            }

            private RegistrationModifier()
            {
            }

            public global::Test.Nested.Module.RegistrationModifier AlsoAsSelf()
            {
                return this;
            }

            public global::Test.Nested.Module.RegistrationModifier AlsoAs(global::System.Type type)
            {
                return this;
            }

            public global::Test.Nested.Module.RegistrationModifier AlsoAs<T>()
            {
                return this;
            }
        }

        private static global::Test.Nested.Module.RegistrationModifier ImportModule<T>()
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier ImportModule(global::System.Type moduleType)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddSingleton(global::System.Type serviceType)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddSingleton(global::System.Type serviceType, global::System.Type implementationType)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddSingleton<TService>()
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddSingleton<TService, TImplementation>() where TImplementation : TService
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddSingleton<TService>(global::System.Func<global::System.IServiceProvider, TService> factory)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddScoped(global::System.Type serviceType)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddScoped(global::System.Type serviceType, global::System.Type implementationType)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddScoped<TService>()
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddScoped<TService, TImplementation>() where TImplementation : TService
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddScoped<TService>(global::System.Func<global::System.IServiceProvider, TService> factory)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddTransient(global::System.Type serviceType)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddTransient(global::System.Type serviceType, global::System.Type implementationType)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddTransient<TService>()
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddTransient<TService, TImplementation>() where TImplementation : TService
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }

        private static global::Test.Nested.Module.RegistrationModifier AddTransient<TService>(global::System.Func<global::System.IServiceProvider, TService> factory)
        {
            return global::Test.Nested.Module.RegistrationModifier.Instance;
        }
    }
}