// <auto-generated/>

#nullable enable

public partial class Provider
    :
    global::System.IDisposable,
    global::System.IAsyncDisposable,
    global::System.IServiceProvider,
    global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,
    global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService
{
    private readonly object _sync = new object();

    private global::Provider.Scope? _rootScope;
    private global::Provider.Scope RootScope => _rootScope ??= CreateScope(_sync);

    private bool _isDisposed;

    private global::Service1? _service1_0;
    private global::Service1 Service1_0 => _service1_0 ??= FactoryService1_0();

    private global::System.Exception? _exception_0;
    private global::System.Exception Exception_0 => _exception_0 ??= FactoryException_0();

    private global::System.Collections.Generic.List<global::System.IDisposable>? _list1_0;
    private global::System.Collections.Generic.List<global::System.IDisposable> List1_0 => _list1_0 ??= FactoryList1_0();

    private global::InterfaceC? _interfaceC_0;
    private global::InterfaceC InterfaceC_0 => _interfaceC_0 ??= FactoryInterfaceC_0();

    private global::InterfaceA? _interfaceA_0;
    private global::InterfaceA InterfaceA_0 => _interfaceA_0 ??= FactoryInterfaceA_0();

    private global::Service2? _service2_0;
    private global::Service2 Service2_0 => _service2_0 ??= FactoryService2_0();

    private global::Service2? _service2_1;
    private global::Service2 Service2_1 => _service2_1 ??= FactoryService2_1();

    private global::System.Collections.Generic.List<global::System.Action>? _list1_1;
    private global::System.Collections.Generic.List<global::System.Action> List1_1 => _list1_1 ??= FactoryList1_1();

    private global::Service2? _service2_2;
    private global::Service2 Service2_2 => _service2_2 ??= FactoryService2_2();

    private global::Service2? _service2_3;
    private global::Service2 Service2_3 => _service2_3 ??= FactoryService2_3();

    global::Microsoft.Extensions.DependencyInjection.IServiceScope global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory.CreateScope() => this.CreateScope(_sync);

    public object? GetService(global::System.Type serviceType)
    {
        if (serviceType == typeof(global::Service1)) return Service1_0;
        if (serviceType == typeof(global::InterfaceA)) return InterfaceA_0;
        if (serviceType == typeof(global::Interface1)) return Service1_0;
        if (serviceType == typeof(global::System.Exception)) return Exception_0;
        if (serviceType == typeof(global::System.Collections.Generic.List<global::System.IDisposable>)) return List1_0;
        if (serviceType == typeof(global::InterfaceC)) return InterfaceC_0;
        if (serviceType == typeof(global::Service2)) return Service2_3;
        if (serviceType == typeof(global::InterfaceB)) return Service2_0;
        if (serviceType == typeof(global::Interface2)) return Service2_0;
        if (serviceType == typeof(global::System.Collections.Generic.List<global::System.Action>)) return List1_1;
        if (serviceType == typeof(global::System.IServiceProvider)) return this;
        if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)) return this;
        if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService)) return this;
        if (serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope)) return RootScope.GetService(serviceType);

        return null;
    }

    private T GetService<T>()
    {
        return (T)GetService(typeof(T))!;
    }

    private global::Service1 FactoryService1_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::Service1();
        }
    }

    private global::System.Exception FactoryException_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::System.Exception();
        }
    }

    private global::System.Collections.Generic.List<global::System.IDisposable> FactoryList1_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::System.Collections.Generic.List<global::System.IDisposable>();
        }
    }

    private global::InterfaceC FactoryInterfaceC_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return (global::InterfaceC)this.GetService(typeof(global::Service2));
        }
    }

    private global::InterfaceA FactoryInterfaceA_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return Func(this);
        }
    }

    private global::Service2 FactoryService2_0()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return GetService2(this);
        }
    }

    private global::Service2 FactoryService2_1()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return global::StaticClass.Generic<global::System.IDisposable>();
        }
    }

    private global::System.Collections.Generic.List<global::System.Action> FactoryList1_1()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return new global::System.Collections.Generic.List<global::System.Action>();
        }
    }

    private global::Service2 FactoryService2_2()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return global::StaticClass.StaticFunc(this);
        }
    }

    private global::Service2 FactoryService2_3()
    {
        lock (_sync)
        {
            ThrowIfDisposed();
            return global::StaticClass.StaticFunc2(this);
        }
    }

    private global::Provider.Scope CreateScope(object? sync)
    {
        ThrowIfDisposed();
        return new global::Provider.Scope(this, sync);
    }

    public bool IsService(global::System.Type serviceType)
    {
        if (serviceType.IsGenericType && serviceType.GetGenericTypeDefinition() == typeof(global::System.Collections.Generic.IEnumerable<>))
        {
            serviceType = serviceType.GetGenericArguments()[0];
        }

        return false
            || serviceType == typeof(global::Interface1)
            || serviceType == typeof(global::Interface2)
            || serviceType == typeof(global::InterfaceA)
            || serviceType == typeof(global::InterfaceB)
            || serviceType == typeof(global::InterfaceC)
            || serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceProviderIsService)
            || serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScope)
            || serviceType == typeof(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)
            || serviceType == typeof(global::Service1)
            || serviceType == typeof(global::Service2)
            || serviceType == typeof(global::System.Collections.Generic.List<global::System.Action>)
            || serviceType == typeof(global::System.Collections.Generic.List<global::System.IDisposable>)
            || serviceType == typeof(global::System.Exception)
            || serviceType == typeof(global::System.IServiceProvider);
    }

    public void Dispose()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_rootScope != null) _rootScope.Dispose();

        if (_service1_0 != null) _service1_0.Dispose();
        if (_interfaceA_0 != null) _interfaceA_0.Dispose();
    }

    public async global::System.Threading.Tasks.ValueTask DisposeAsync()
    {
        lock (_sync)
        {
            if (_isDisposed)
            {
                return;
            }

            _isDisposed = true;
        }

        if (_rootScope != null) await _rootScope.DisposeAsync();

        if (_service1_0 != null) _service1_0.Dispose();
        if (_interfaceA_0 != null) _interfaceA_0.Dispose();
        if (_service2_0 != null) await _service2_0.DisposeAsync();
        if (_service2_1 != null) await _service2_1.DisposeAsync();
        if (_service2_2 != null) await _service2_2.DisposeAsync();
        if (_service2_3 != null) await _service2_3.DisposeAsync();
    }

    private void ThrowIfDisposed()
    {
        if (_isDisposed)
        {
            throw new global::System.ObjectDisposedException("Provider");
        }
    }
}